name: ci
on:
  push:
    branches: [ master, main ]

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    # still keep job-level env (fine)
    env:
      RM_PASSWORD: ${{ secrets.RM_PASSWORD }}
      RA_PASSWORD: ${{ secrets.RA_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      # --- NEW: explicitly export secrets to the job environment ---
      - name: Export secrets to env (authoritative)
        run: |
          echo "RM_PASSWORD=${{ secrets.RM_PASSWORD }}" >> "$GITHUB_ENV"
          echo "RA_PASSWORD=${{ secrets.RA_PASSWORD }}" >> "$GITHUB_ENV"

      # --- NEW: debug what repo/branch/event we're in + presence (masked) ---
      - name: Debug context & secrets presence
        run: |
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Ref:  $GITHUB_REF  (name: $GITHUB_REF_NAME)"
          echo "Event: $GITHUB_EVENT_NAME  Actor: $GITHUB_ACTOR"
          echo "RM present? ${RM_PASSWORD:+yes}  len=${#RM_PASSWORD}"
          echo "RA present? ${RA_PASSWORD:+yes}  len=${#RA_PASSWORD}"
          env | grep -E '^(RM|RA)_|^GITHUB_' || true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install mkdocs-material mkdocs-encryptcontent-plugin
          # if you encrypt partial blocks, also:
          # python -m pip install pymdown-extensions

      # keep this check; it will now pass if secrets are truly present
      - name: Check secrets
        run: |
          test -n "$RM_PASSWORD" || (echo "Falta RM_PASSWORD" && exit 1)
          test -n "$RA_PASSWORD" || (echo "Falta RA_PASSWORD" && exit 1)

      - name: Build
        run: python -m mkdocs build --clean --strict

      - name: Deploy to gh-pages
        run: python -m mkdocs gh-deploy --force
